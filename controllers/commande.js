import Commande from "../models/commande.js";
import { Utilisateur } from "../models/user.js";
import logger from "../utils/logger.js";

// üìå Obtenir toutes les commandes
export const getAllCommandes = async (req, res) => {
  try {
    const commandes = await Commande.find().populate("magasinier", "nom prenom email");
    logger.info(`[COMMANDE] R√©cup√©ration de toutes les commandes (${commandes.length})`);
    res.status(200).json(commandes);
  } catch (error) {
    logger.error(`[COMMANDE] Erreur r√©cup√©ration toutes les commandes : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Obtenir une commande par ID
export const getCommandeById = async (req, res) => {
  try {
    const commande = await Commande.findById(req.params.id).populate("magasinier", "nom prenom email");
    if (!commande) {
      logger.warn(`[COMMANDE] Commande non trouv√©e : ${req.params.id}`);
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }
    logger.info(`[COMMANDE] Commande r√©cup√©r√©e : ${req.params.id}`);
    res.status(200).json(commande);
  } catch (error) {
    logger.error(`[COMMANDE] Erreur r√©cup√©ration commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Cr√©er une commande
export const createCommande = async (req, res) => {
  try {
    const { magasinier, fournisseur, statut } = req.body;

    const existingMagasigner = await Utilisateur.findById(magasinier);
    if (!existingMagasigner) {
      logger.warn(`[COMMANDE] magasinier non trouv√© : ID ${magasinier}`);
      return res.status(404).json({ message: "magasinier non trouv√©" });
    }

    if (!magasinier || !fournisseur) {
      logger.warn("[COMMANDE] Champs requis manquants lors de la cr√©ation");
      return res.status(400).json({ message: "Tous les champs sont requis" });
    }

    const nouvelleCommande = new Commande({
      magasinier,
      fournisseur,
      statut
    });

    await nouvelleCommande.save();
    logger.info(`[COMMANDE] Nouvelle commande cr√©√©e par ${magasinier}`);
    res.status(201).json({ message: "Commande cr√©√©e avec succ√®s", commande: nouvelleCommande });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur cr√©ation commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Mettre √† jour une commande
export const updateCommande = async (req, res) => {
  try {
    const { magasinier, fournisseur, statut } = req.body;

    const existingMagasigner = await Utilisateur.findById(magasinier);
    if (!existingMagasigner) {
      logger.warn(`[COMMANDE] magasinier non trouv√© : ID ${magasinier}`);
      return res.status(404).json({ message: "magasinier non trouv√©" });
    }

    const commande = await Commande.findById(req.params.id);
    if (!commande) {
      logger.warn(`[COMMANDE] Commande √† mettre √† jour non trouv√©e : ${req.params.id}`);
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }

    if (magasinier) commande.magasinier = magasinier;
    if (fournisseur) commande.fournisseur = fournisseur;
    if (statut) commande.statut = statut;

    await commande.save();
    logger.info(`[COMMANDE] Commande mise √† jour : ${req.params.id}`);
    res.status(200).json({ message: "Commande mise √† jour avec succ√®s", commande });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur mise √† jour commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Supprimer une commande
export const deleteCommande = async (req, res) => {
  try {
    const commande = await Commande.findByIdAndDelete(req.params.id);
    if (!commande) {
      logger.warn(`[COMMANDE] Commande √† supprimer non trouv√©e : ${req.params.id}`);
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }

    logger.info(`[COMMANDE] Commande supprim√©e : ${req.params.id}`);
    res.status(200).json({ message: "Commande supprim√©e avec succ√®s" });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur suppression commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};
